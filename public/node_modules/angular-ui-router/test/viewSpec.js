/// <reference path='../typings/angularjs/angular.d.ts' />
/// <reference path='../typings/angularjs/angular-mocks.d.ts' />
/// <reference path='../typings/jasmine/jasmine.d.ts' />
var module = angular.mock.module;
var common_1 = require("../src/common/common");
var module_1 = require("../src/path/module");
var module_2 = require("../src/resolve/module");
var module_3 = require("../src/path/module");
var module_4 = require("../src/view/module");
var module_5 = require("../src/state/module");
var module_6 = require("../src/state/module");
describe('view', function () {
    var scope, $compile, $injector, elem, $controllerProvider, $urlMatcherFactoryProvider;
    var root, states;
    beforeEach(module('ui.router', function (_$provide_, _$controllerProvider_, _$urlMatcherFactoryProvider_) {
        _$provide_.factory('foo', function () {
            return "Foo";
        });
        $controllerProvider = _$controllerProvider_;
        $urlMatcherFactoryProvider = _$urlMatcherFactoryProvider_;
    }));
    var register;
    var registerState = common_1.curry(function (_states, stateBuilder, config) {
        var state = common_1.inherit(new module_6.State(), common_1.extend({}, config, {
            self: config,
            resolve: config.resolve || {}
        }));
        var built = stateBuilder.build(state);
        return _states[built.name] = built;
    });
    beforeEach(inject(function ($rootScope, _$compile_, _$injector_) {
        scope = $rootScope.$new();
        $compile = _$compile_;
        $injector = _$injector_;
        elem = angular.element('<div>');
        states = {};
        var matcher = new module_5.StateMatcher(states);
        var stateBuilder = new module_5.StateBuilder(function () { return root; }, matcher, $urlMatcherFactoryProvider);
        register = registerState(states, stateBuilder);
        root = register({ name: "" });
    }));
    describe('controller handling', function () {
        var ctx, state;
        beforeEach(function () {
            state = register({ name: "foo" });
            var path = module_3.PathFactory.bindTransNodesToPath([root, state].map(function (_state) { return new module_1.Node(_state, {}); }));
            ctx = new module_2.ResolveContext(path);
        });
        it('uses the controllerProvider to get controller dynamically', inject(function ($view, $q) {
            var ctrlExpression;
            $controllerProvider.register("AcmeFooController", function ($scope, foo) { });
            elem.append($compile('<div><ui-view></ui-view></div>')(scope));
            var rootcontext = { name: "", parent: null };
            var viewConfig = {
                viewDeclarationObj: {
                    template: "test",
                    controllerProvider: function (/* $stateParams, */ foo) {
                        ctrlExpression = foo + "Controller as foo";
                        return ctrlExpression;
                    }
                },
                rawViewName: '$default',
                context: { name: "blarg", parent: rootcontext },
                params: { type: "Acme" },
                locals: {}
            };
            var injector = {
                invokeNow: function (fn, locals) { return $injector.invoke(fn, null, locals); },
                invokeLater: function (fn, locals) { return $injector.invoke(fn, null, locals); }
            };
            $view.load(new module_4.ViewConfig(viewConfig), injector);
            $q.flush();
            expect(ctrlExpression).toEqual("FooController as foo");
        }));
    });
});
